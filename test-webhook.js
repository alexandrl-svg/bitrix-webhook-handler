#!/usr/bin/env node

import axios from 'axios';

const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://your-app.vercel.app';

async function testWebhook() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook...');
  console.log(`üì° URL: ${WEBHOOK_URL}`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    console.log('\nüì§ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health...');
    const healthResponse = await axios.get(`${WEBHOOK_URL}/health`);
    console.log('üì• Health:', JSON.stringify(healthResponse.data, null, 2));

    // 2. –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ë–ü
    console.log('\nüì§ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ë–ü...');
    const templatesResponse = await axios.get(`${WEBHOOK_URL}/api/bp-templates`);
    console.log('üì• Templates:', JSON.stringify(templatesResponse.data, null, 2));

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ü
    console.log('\nüì§ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–ü...');
    const createBpResponse = await axios.post(`${WEBHOOK_URL}/api/create-bp`, {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ë–ü –∏–∑ GitHub',
      description: '–ë–ü —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ GitHub –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      documentType: ['crm', 'deal'],
      template: [{
        "Type": "SequentialWorkflowActivity",
        "Name": "Template",
        "Activated": "Y",
        "Properties": {
          "Title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"
        },
        "Children": []
      }]
    });
    console.log('üì• Create BP:', JSON.stringify(createBpResponse.data, null, 2));

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üéØ Webhook –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: ${WEBHOOK_URL}/bitrix-webhook`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
    
    if (error.code === 'ENOTFOUND') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π WEBHOOK_URL');
      console.log('3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (process.argv[2]) {
  process.env.WEBHOOK_URL = process.argv[2];
}

testWebhook().catch(console.error);
